// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pdpb.proto

/*
	Package pdpb is a generated protocol buffer package.

	It is generated from these files:
		pdpb.proto

	It has these top-level messages:
		ChangePeer
		TransferLeader
		PeerStats
		Range
		StoreStats
		RequestHeader
		ResponseHeader
		Leader
		LeaderReq
		LeaderRsp
		PutStoreReq
		PutStoreRsp
		GetStoreReq
		GetStoreRsp
		GetClusterIDReq
		GetClusterIDRsp
		AllocIDReq
		AllocIDRsp
		IsClusterBootstrapReq
		IsClusterBootstrapRsp
		BootstrapClusterReq
		BootstrapClusterRsp
		CellHeartbeatReq
		CellHeartbeatRsp
		StoreHeartbeatReq
		StoreHeartbeatRsp
		AskSplitReq
		AskSplitRsp
		ReportSplitReq
		ReportSplitRsp
		GetLastRangesReq
		GetLastRangesRsp
		SetLogLevel
		FieldDef
		IndexDef
		IndexKeyRequest
		IndexSplitRequest
		IndexRequest
*/
package pdpb

import (
	"fmt"

	proto "github.com/golang/protobuf/proto"

	math "math"

	metapb "github.com/deepfabric/elasticell/pkg/pb/metapb"

	context "golang.org/x/net/context"

	grpc "google.golang.org/grpc"

	github_com_golang_protobuf_proto "github.com/golang/protobuf/proto"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ConfChangeType int32

const (
	AddNode    ConfChangeType = 0
	RemoveNode ConfChangeType = 1
)

var ConfChangeType_name = map[int32]string{
	0: "AddNode",
	1: "RemoveNode",
}
var ConfChangeType_value = map[string]int32{
	"AddNode":    0,
	"RemoveNode": 1,
}

func (x ConfChangeType) Enum() *ConfChangeType {
	p := new(ConfChangeType)
	*p = x
	return p
}
func (x ConfChangeType) String() string {
	return proto.EnumName(ConfChangeType_name, int32(x))
}
func (x *ConfChangeType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ConfChangeType_value, data, "ConfChangeType")
	if err != nil {
		return err
	}
	*x = ConfChangeType(value)
	return nil
}
func (ConfChangeType) EnumDescriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{0} }

type FieldType int32

const (
	Uint8  FieldType = 0
	Uint16 FieldType = 1
	Uint32 FieldType = 2
	Uint64 FieldType = 3
	Text   FieldType = 4
)

var FieldType_name = map[int32]string{
	0: "Uint8",
	1: "Uint16",
	2: "Uint32",
	3: "Uint64",
	4: "Text",
}
var FieldType_value = map[string]int32{
	"Uint8":  0,
	"Uint16": 1,
	"Uint32": 2,
	"Uint64": 3,
	"Text":   4,
}

func (x FieldType) Enum() *FieldType {
	p := new(FieldType)
	*p = x
	return p
}
func (x FieldType) String() string {
	return proto.EnumName(FieldType_name, int32(x))
}
func (x *FieldType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FieldType_value, data, "FieldType")
	if err != nil {
		return err
	}
	*x = FieldType(value)
	return nil
}
func (FieldType) EnumDescriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{1} }

type ChangePeer struct {
	Type             ConfChangeType `protobuf:"varint,1,opt,name=type,enum=pdpb.ConfChangeType" json:"type"`
	Peer             *metapb.Peer   `protobuf:"bytes,2,opt,name=peer" json:"peer,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *ChangePeer) Reset()                    { *m = ChangePeer{} }
func (m *ChangePeer) String() string            { return proto.CompactTextString(m) }
func (*ChangePeer) ProtoMessage()               {}
func (*ChangePeer) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{0} }

func (m *ChangePeer) GetType() ConfChangeType {
	if m != nil {
		return m.Type
	}
	return AddNode
}

func (m *ChangePeer) GetPeer() *metapb.Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

type TransferLeader struct {
	Peer             metapb.Peer `protobuf:"bytes,1,opt,name=peer" json:"peer"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *TransferLeader) Reset()                    { *m = TransferLeader{} }
func (m *TransferLeader) String() string            { return proto.CompactTextString(m) }
func (*TransferLeader) ProtoMessage()               {}
func (*TransferLeader) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{1} }

func (m *TransferLeader) GetPeer() metapb.Peer {
	if m != nil {
		return m.Peer
	}
	return metapb.Peer{}
}

type PeerStats struct {
	Peer             metapb.Peer `protobuf:"bytes,1,opt,name=peer" json:"peer"`
	DownSeconds      uint64      `protobuf:"varint,2,opt,name=downSeconds" json:"downSeconds"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *PeerStats) Reset()                    { *m = PeerStats{} }
func (m *PeerStats) String() string            { return proto.CompactTextString(m) }
func (*PeerStats) ProtoMessage()               {}
func (*PeerStats) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{2} }

func (m *PeerStats) GetPeer() metapb.Peer {
	if m != nil {
		return m.Peer
	}
	return metapb.Peer{}
}

func (m *PeerStats) GetDownSeconds() uint64 {
	if m != nil {
		return m.DownSeconds
	}
	return 0
}

type Range struct {
	Cell             metapb.Cell  `protobuf:"bytes,1,opt,name=cell" json:"cell"`
	LeaderStore      metapb.Store `protobuf:"bytes,2,opt,name=leaderStore" json:"leaderStore"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Range) Reset()                    { *m = Range{} }
func (m *Range) String() string            { return proto.CompactTextString(m) }
func (*Range) ProtoMessage()               {}
func (*Range) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{3} }

func (m *Range) GetCell() metapb.Cell {
	if m != nil {
		return m.Cell
	}
	return metapb.Cell{}
}

func (m *Range) GetLeaderStore() metapb.Store {
	if m != nil {
		return m.LeaderStore
	}
	return metapb.Store{}
}

type StoreStats struct {
	StoreID uint64 `protobuf:"varint,1,opt,name=storeID" json:"storeID"`
	// Capacity for the store.
	Capacity uint64 `protobuf:"varint,2,opt,name=capacity" json:"capacity"`
	// Available size for the store.
	Available uint64 `protobuf:"varint,3,opt,name=available" json:"available"`
	// Total region count in this store.
	CellCount uint32 `protobuf:"varint,4,opt,name=cellCount" json:"cellCount"`
	// Current sending snapshot count.
	SendingSnapCount uint32 `protobuf:"varint,5,opt,name=sendingSnapCount" json:"sendingSnapCount"`
	// Current receiving snapshot count.
	ReceivingSnapCount uint32 `protobuf:"varint,6,opt,name=receivingSnapCount" json:"receivingSnapCount"`
	// When the store is started (unix timestamp in seconds).
	StartTime uint32 `protobuf:"varint,7,opt,name=startTime" json:"startTime"`
	// How many region is applying snapshot.
	ApplyingSnapCount uint32 `protobuf:"varint,8,opt,name=applyingSnapCount" json:"applyingSnapCount"`
	// If the store is busy
	IsBusy bool `protobuf:"varint,9,opt,name=isBusy" json:"isBusy"`
	// Actually used space by db
	UsedSize uint64 `protobuf:"varint,10,opt,name=usedSize" json:"usedSize"`
	// Bytes written for the store.
	BytesWritten     uint64 `protobuf:"varint,11,opt,name=bytesWritten" json:"bytesWritten"`
	LogLevel         int32  `protobuf:"varint,12,opt,name=logLevel" json:"logLevel"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *StoreStats) Reset()                    { *m = StoreStats{} }
func (m *StoreStats) String() string            { return proto.CompactTextString(m) }
func (*StoreStats) ProtoMessage()               {}
func (*StoreStats) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{4} }

func (m *StoreStats) GetStoreID() uint64 {
	if m != nil {
		return m.StoreID
	}
	return 0
}

func (m *StoreStats) GetCapacity() uint64 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

func (m *StoreStats) GetAvailable() uint64 {
	if m != nil {
		return m.Available
	}
	return 0
}

func (m *StoreStats) GetCellCount() uint32 {
	if m != nil {
		return m.CellCount
	}
	return 0
}

func (m *StoreStats) GetSendingSnapCount() uint32 {
	if m != nil {
		return m.SendingSnapCount
	}
	return 0
}

func (m *StoreStats) GetReceivingSnapCount() uint32 {
	if m != nil {
		return m.ReceivingSnapCount
	}
	return 0
}

func (m *StoreStats) GetStartTime() uint32 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *StoreStats) GetApplyingSnapCount() uint32 {
	if m != nil {
		return m.ApplyingSnapCount
	}
	return 0
}

func (m *StoreStats) GetIsBusy() bool {
	if m != nil {
		return m.IsBusy
	}
	return false
}

func (m *StoreStats) GetUsedSize() uint64 {
	if m != nil {
		return m.UsedSize
	}
	return 0
}

func (m *StoreStats) GetBytesWritten() uint64 {
	if m != nil {
		return m.BytesWritten
	}
	return 0
}

func (m *StoreStats) GetLogLevel() int32 {
	if m != nil {
		return m.LogLevel
	}
	return 0
}

type RequestHeader struct {
	// cluster_id is the ID of the cluster which be sent to.
	ClusterID        uint64 `protobuf:"varint,1,opt,name=clusterID" json:"clusterID"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RequestHeader) Reset()                    { *m = RequestHeader{} }
func (m *RequestHeader) String() string            { return proto.CompactTextString(m) }
func (*RequestHeader) ProtoMessage()               {}
func (*RequestHeader) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{5} }

func (m *RequestHeader) GetClusterID() uint64 {
	if m != nil {
		return m.ClusterID
	}
	return 0
}

type ResponseHeader struct {
	ClusterID        uint64 `protobuf:"varint,1,opt,name=clusterID" json:"clusterID"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ResponseHeader) Reset()                    { *m = ResponseHeader{} }
func (m *ResponseHeader) String() string            { return proto.CompactTextString(m) }
func (*ResponseHeader) ProtoMessage()               {}
func (*ResponseHeader) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{6} }

func (m *ResponseHeader) GetClusterID() uint64 {
	if m != nil {
		return m.ClusterID
	}
	return 0
}

type Leader struct {
	ID               uint64 `protobuf:"varint,1,opt,name=id" json:"id"`
	Name             string `protobuf:"bytes,2,opt,name=name" json:"name"`
	Addr             string `protobuf:"bytes,3,opt,name=addr" json:"addr"`
	EctdClientAddr   string `protobuf:"bytes,4,opt,name=ectdClientAddr" json:"ectdClientAddr"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Leader) Reset()                    { *m = Leader{} }
func (m *Leader) String() string            { return proto.CompactTextString(m) }
func (*Leader) ProtoMessage()               {}
func (*Leader) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{7} }

func (m *Leader) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Leader) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Leader) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *Leader) GetEctdClientAddr() string {
	if m != nil {
		return m.EctdClientAddr
	}
	return ""
}

type LeaderReq struct {
	From             string `protobuf:"bytes,1,opt,name=from" json:"from"`
	ID               uint64 `protobuf:"varint,2,opt,name=id" json:"id"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *LeaderReq) Reset()                    { *m = LeaderReq{} }
func (m *LeaderReq) String() string            { return proto.CompactTextString(m) }
func (*LeaderReq) ProtoMessage()               {}
func (*LeaderReq) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{8} }

func (m *LeaderReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *LeaderReq) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type LeaderRsp struct {
	Leader           Leader `protobuf:"bytes,1,opt,name=leader" json:"leader"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *LeaderRsp) Reset()                    { *m = LeaderRsp{} }
func (m *LeaderRsp) String() string            { return proto.CompactTextString(m) }
func (*LeaderRsp) ProtoMessage()               {}
func (*LeaderRsp) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{9} }

func (m *LeaderRsp) GetLeader() Leader {
	if m != nil {
		return m.Leader
	}
	return Leader{}
}

type PutStoreReq struct {
	From             string        `protobuf:"bytes,1,opt,name=from" json:"from"`
	ID               uint64        `protobuf:"varint,2,opt,name=id" json:"id"`
	Header           RequestHeader `protobuf:"bytes,3,opt,name=header" json:"header"`
	Store            metapb.Store  `protobuf:"bytes,4,opt,name=store" json:"store"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *PutStoreReq) Reset()                    { *m = PutStoreReq{} }
func (m *PutStoreReq) String() string            { return proto.CompactTextString(m) }
func (*PutStoreReq) ProtoMessage()               {}
func (*PutStoreReq) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{10} }

func (m *PutStoreReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *PutStoreReq) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *PutStoreReq) GetHeader() RequestHeader {
	if m != nil {
		return m.Header
	}
	return RequestHeader{}
}

func (m *PutStoreReq) GetStore() metapb.Store {
	if m != nil {
		return m.Store
	}
	return metapb.Store{}
}

type PutStoreRsp struct {
	Header           ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *PutStoreRsp) Reset()                    { *m = PutStoreRsp{} }
func (m *PutStoreRsp) String() string            { return proto.CompactTextString(m) }
func (*PutStoreRsp) ProtoMessage()               {}
func (*PutStoreRsp) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{11} }

func (m *PutStoreRsp) GetHeader() ResponseHeader {
	if m != nil {
		return m.Header
	}
	return ResponseHeader{}
}

type GetStoreReq struct {
	From             string        `protobuf:"bytes,1,opt,name=from" json:"from"`
	ID               uint64        `protobuf:"varint,2,opt,name=id" json:"id"`
	Header           RequestHeader `protobuf:"bytes,3,opt,name=header" json:"header"`
	StoreID          uint64        `protobuf:"varint,4,opt,name=storeID" json:"storeID"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *GetStoreReq) Reset()                    { *m = GetStoreReq{} }
func (m *GetStoreReq) String() string            { return proto.CompactTextString(m) }
func (*GetStoreReq) ProtoMessage()               {}
func (*GetStoreReq) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{12} }

func (m *GetStoreReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *GetStoreReq) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *GetStoreReq) GetHeader() RequestHeader {
	if m != nil {
		return m.Header
	}
	return RequestHeader{}
}

func (m *GetStoreReq) GetStoreID() uint64 {
	if m != nil {
		return m.StoreID
	}
	return 0
}

type GetStoreRsp struct {
	Header           ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header"`
	Store            metapb.Store   `protobuf:"bytes,2,opt,name=store" json:"store"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *GetStoreRsp) Reset()                    { *m = GetStoreRsp{} }
func (m *GetStoreRsp) String() string            { return proto.CompactTextString(m) }
func (*GetStoreRsp) ProtoMessage()               {}
func (*GetStoreRsp) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{13} }

func (m *GetStoreRsp) GetHeader() ResponseHeader {
	if m != nil {
		return m.Header
	}
	return ResponseHeader{}
}

func (m *GetStoreRsp) GetStore() metapb.Store {
	if m != nil {
		return m.Store
	}
	return metapb.Store{}
}

type GetClusterIDReq struct {
	From             string `protobuf:"bytes,1,opt,name=from" json:"from"`
	ID               uint64 `protobuf:"varint,2,opt,name=id" json:"id"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GetClusterIDReq) Reset()                    { *m = GetClusterIDReq{} }
func (m *GetClusterIDReq) String() string            { return proto.CompactTextString(m) }
func (*GetClusterIDReq) ProtoMessage()               {}
func (*GetClusterIDReq) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{14} }

func (m *GetClusterIDReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *GetClusterIDReq) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type GetClusterIDRsp struct {
	ID               uint64 `protobuf:"varint,1,opt,name=id" json:"id"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GetClusterIDRsp) Reset()                    { *m = GetClusterIDRsp{} }
func (m *GetClusterIDRsp) String() string            { return proto.CompactTextString(m) }
func (*GetClusterIDRsp) ProtoMessage()               {}
func (*GetClusterIDRsp) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{15} }

func (m *GetClusterIDRsp) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type AllocIDReq struct {
	From             string `protobuf:"bytes,1,opt,name=from" json:"from"`
	ID               uint64 `protobuf:"varint,2,opt,name=id" json:"id"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *AllocIDReq) Reset()                    { *m = AllocIDReq{} }
func (m *AllocIDReq) String() string            { return proto.CompactTextString(m) }
func (*AllocIDReq) ProtoMessage()               {}
func (*AllocIDReq) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{16} }

func (m *AllocIDReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *AllocIDReq) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type AllocIDRsp struct {
	ID               uint64 `protobuf:"varint,1,opt,name=id" json:"id"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *AllocIDRsp) Reset()                    { *m = AllocIDRsp{} }
func (m *AllocIDRsp) String() string            { return proto.CompactTextString(m) }
func (*AllocIDRsp) ProtoMessage()               {}
func (*AllocIDRsp) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{17} }

func (m *AllocIDRsp) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type IsClusterBootstrapReq struct {
	From             string `protobuf:"bytes,1,opt,name=from" json:"from"`
	ID               uint64 `protobuf:"varint,2,opt,name=id" json:"id"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *IsClusterBootstrapReq) Reset()                    { *m = IsClusterBootstrapReq{} }
func (m *IsClusterBootstrapReq) String() string            { return proto.CompactTextString(m) }
func (*IsClusterBootstrapReq) ProtoMessage()               {}
func (*IsClusterBootstrapReq) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{18} }

func (m *IsClusterBootstrapReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *IsClusterBootstrapReq) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type IsClusterBootstrapRsp struct {
	Value            bool   `protobuf:"varint,1,opt,name=value" json:"value"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *IsClusterBootstrapRsp) Reset()                    { *m = IsClusterBootstrapRsp{} }
func (m *IsClusterBootstrapRsp) String() string            { return proto.CompactTextString(m) }
func (*IsClusterBootstrapRsp) ProtoMessage()               {}
func (*IsClusterBootstrapRsp) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{19} }

func (m *IsClusterBootstrapRsp) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type BootstrapClusterReq struct {
	From             string       `protobuf:"bytes,1,opt,name=from" json:"from"`
	ID               uint64       `protobuf:"varint,2,opt,name=id" json:"id"`
	Store            metapb.Store `protobuf:"bytes,3,opt,name=store" json:"store"`
	Cell             metapb.Cell  `protobuf:"bytes,4,opt,name=cell" json:"cell"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *BootstrapClusterReq) Reset()                    { *m = BootstrapClusterReq{} }
func (m *BootstrapClusterReq) String() string            { return proto.CompactTextString(m) }
func (*BootstrapClusterReq) ProtoMessage()               {}
func (*BootstrapClusterReq) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{20} }

func (m *BootstrapClusterReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *BootstrapClusterReq) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *BootstrapClusterReq) GetStore() metapb.Store {
	if m != nil {
		return m.Store
	}
	return metapb.Store{}
}

func (m *BootstrapClusterReq) GetCell() metapb.Cell {
	if m != nil {
		return m.Cell
	}
	return metapb.Cell{}
}

type BootstrapClusterRsp struct {
	AlreadyBootstrapped bool   `protobuf:"varint,1,opt,name=alreadyBootstrapped" json:"alreadyBootstrapped"`
	XXX_unrecognized    []byte `json:"-"`
}

func (m *BootstrapClusterRsp) Reset()                    { *m = BootstrapClusterRsp{} }
func (m *BootstrapClusterRsp) String() string            { return proto.CompactTextString(m) }
func (*BootstrapClusterRsp) ProtoMessage()               {}
func (*BootstrapClusterRsp) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{21} }

func (m *BootstrapClusterRsp) GetAlreadyBootstrapped() bool {
	if m != nil {
		return m.AlreadyBootstrapped
	}
	return false
}

type CellHeartbeatReq struct {
	From   string       `protobuf:"bytes,1,opt,name=from" json:"from"`
	ID     uint64       `protobuf:"varint,2,opt,name=id" json:"id"`
	Cell   metapb.Cell  `protobuf:"bytes,3,opt,name=cell" json:"cell"`
	Leader *metapb.Peer `protobuf:"bytes,4,opt,name=leader" json:"leader,omitempty"`
	// Leader considers that these peers are down.
	DownPeers []PeerStats `protobuf:"bytes,5,rep,name=downPeers" json:"downPeers"`
	// Pending peers are the peers that the leader can't consider as
	// working followers.
	PendingPeers []metapb.Peer `protobuf:"bytes,6,rep,name=pendingPeers" json:"pendingPeers"`
	// Bytes read/written during this period.
	BytesWritten uint64 `protobuf:"varint,7,opt,name=bytesWritten" json:"bytesWritten"`
	BytesRead    uint64 `protobuf:"varint,8,opt,name=bytesRead" json:"bytesRead"`
	// Keys read/written during this period.
	KeysWritten      uint64 `protobuf:"varint,9,opt,name=keysWritten" json:"keysWritten"`
	KeysRead         uint64 `protobuf:"varint,10,opt,name=keysRead" json:"keysRead"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CellHeartbeatReq) Reset()                    { *m = CellHeartbeatReq{} }
func (m *CellHeartbeatReq) String() string            { return proto.CompactTextString(m) }
func (*CellHeartbeatReq) ProtoMessage()               {}
func (*CellHeartbeatReq) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{22} }

func (m *CellHeartbeatReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *CellHeartbeatReq) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *CellHeartbeatReq) GetCell() metapb.Cell {
	if m != nil {
		return m.Cell
	}
	return metapb.Cell{}
}

func (m *CellHeartbeatReq) GetLeader() *metapb.Peer {
	if m != nil {
		return m.Leader
	}
	return nil
}

func (m *CellHeartbeatReq) GetDownPeers() []PeerStats {
	if m != nil {
		return m.DownPeers
	}
	return nil
}

func (m *CellHeartbeatReq) GetPendingPeers() []metapb.Peer {
	if m != nil {
		return m.PendingPeers
	}
	return nil
}

func (m *CellHeartbeatReq) GetBytesWritten() uint64 {
	if m != nil {
		return m.BytesWritten
	}
	return 0
}

func (m *CellHeartbeatReq) GetBytesRead() uint64 {
	if m != nil {
		return m.BytesRead
	}
	return 0
}

func (m *CellHeartbeatReq) GetKeysWritten() uint64 {
	if m != nil {
		return m.KeysWritten
	}
	return 0
}

func (m *CellHeartbeatReq) GetKeysRead() uint64 {
	if m != nil {
		return m.KeysRead
	}
	return 0
}

type CellHeartbeatRsp struct {
	ChangePeer       *ChangePeer     `protobuf:"bytes,1,opt,name=changePeer" json:"changePeer,omitempty"`
	TransferLeader   *TransferLeader `protobuf:"bytes,2,opt,name=transferLeader" json:"transferLeader,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *CellHeartbeatRsp) Reset()                    { *m = CellHeartbeatRsp{} }
func (m *CellHeartbeatRsp) String() string            { return proto.CompactTextString(m) }
func (*CellHeartbeatRsp) ProtoMessage()               {}
func (*CellHeartbeatRsp) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{23} }

func (m *CellHeartbeatRsp) GetChangePeer() *ChangePeer {
	if m != nil {
		return m.ChangePeer
	}
	return nil
}

func (m *CellHeartbeatRsp) GetTransferLeader() *TransferLeader {
	if m != nil {
		return m.TransferLeader
	}
	return nil
}

type StoreHeartbeatReq struct {
	From             string        `protobuf:"bytes,1,opt,name=from" json:"from"`
	ID               uint64        `protobuf:"varint,2,opt,name=id" json:"id"`
	Header           RequestHeader `protobuf:"bytes,3,opt,name=header" json:"header"`
	Stats            *StoreStats   `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *StoreHeartbeatReq) Reset()                    { *m = StoreHeartbeatReq{} }
func (m *StoreHeartbeatReq) String() string            { return proto.CompactTextString(m) }
func (*StoreHeartbeatReq) ProtoMessage()               {}
func (*StoreHeartbeatReq) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{24} }

func (m *StoreHeartbeatReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *StoreHeartbeatReq) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *StoreHeartbeatReq) GetHeader() RequestHeader {
	if m != nil {
		return m.Header
	}
	return RequestHeader{}
}

func (m *StoreHeartbeatReq) GetStats() *StoreStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

type StoreHeartbeatRsp struct {
	Header           ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header"`
	SetLogLevel      *SetLogLevel   `protobuf:"bytes,2,opt,name=setLogLevel" json:"setLogLevel,omitempty"`
	Indices          []*IndexDef    `protobuf:"bytes,3,rep,name=indices" json:"indices,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *StoreHeartbeatRsp) Reset()                    { *m = StoreHeartbeatRsp{} }
func (m *StoreHeartbeatRsp) String() string            { return proto.CompactTextString(m) }
func (*StoreHeartbeatRsp) ProtoMessage()               {}
func (*StoreHeartbeatRsp) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{25} }

func (m *StoreHeartbeatRsp) GetHeader() ResponseHeader {
	if m != nil {
		return m.Header
	}
	return ResponseHeader{}
}

func (m *StoreHeartbeatRsp) GetSetLogLevel() *SetLogLevel {
	if m != nil {
		return m.SetLogLevel
	}
	return nil
}

func (m *StoreHeartbeatRsp) GetIndices() []*IndexDef {
	if m != nil {
		return m.Indices
	}
	return nil
}

type AskSplitReq struct {
	From             string        `protobuf:"bytes,1,opt,name=from" json:"from"`
	ID               uint64        `protobuf:"varint,2,opt,name=id" json:"id"`
	Header           RequestHeader `protobuf:"bytes,3,opt,name=header" json:"header"`
	Cell             metapb.Cell   `protobuf:"bytes,4,opt,name=cell" json:"cell"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *AskSplitReq) Reset()                    { *m = AskSplitReq{} }
func (m *AskSplitReq) String() string            { return proto.CompactTextString(m) }
func (*AskSplitReq) ProtoMessage()               {}
func (*AskSplitReq) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{26} }

func (m *AskSplitReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *AskSplitReq) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *AskSplitReq) GetHeader() RequestHeader {
	if m != nil {
		return m.Header
	}
	return RequestHeader{}
}

func (m *AskSplitReq) GetCell() metapb.Cell {
	if m != nil {
		return m.Cell
	}
	return metapb.Cell{}
}

type AskSplitRsp struct {
	Header           ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header"`
	NewCellID        uint64         `protobuf:"varint,2,opt,name=newCellID" json:"newCellID"`
	NewPeerIDs       []uint64       `protobuf:"varint,3,rep,name=newPeerIDs" json:"newPeerIDs,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *AskSplitRsp) Reset()                    { *m = AskSplitRsp{} }
func (m *AskSplitRsp) String() string            { return proto.CompactTextString(m) }
func (*AskSplitRsp) ProtoMessage()               {}
func (*AskSplitRsp) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{27} }

func (m *AskSplitRsp) GetHeader() ResponseHeader {
	if m != nil {
		return m.Header
	}
	return ResponseHeader{}
}

func (m *AskSplitRsp) GetNewCellID() uint64 {
	if m != nil {
		return m.NewCellID
	}
	return 0
}

func (m *AskSplitRsp) GetNewPeerIDs() []uint64 {
	if m != nil {
		return m.NewPeerIDs
	}
	return nil
}

type ReportSplitReq struct {
	From             string        `protobuf:"bytes,1,opt,name=from" json:"from"`
	ID               uint64        `protobuf:"varint,2,opt,name=id" json:"id"`
	Header           RequestHeader `protobuf:"bytes,3,opt,name=header" json:"header"`
	Left             metapb.Cell   `protobuf:"bytes,4,opt,name=left" json:"left"`
	Right            metapb.Cell   `protobuf:"bytes,5,opt,name=right" json:"right"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *ReportSplitReq) Reset()                    { *m = ReportSplitReq{} }
func (m *ReportSplitReq) String() string            { return proto.CompactTextString(m) }
func (*ReportSplitReq) ProtoMessage()               {}
func (*ReportSplitReq) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{28} }

func (m *ReportSplitReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *ReportSplitReq) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ReportSplitReq) GetHeader() RequestHeader {
	if m != nil {
		return m.Header
	}
	return RequestHeader{}
}

func (m *ReportSplitReq) GetLeft() metapb.Cell {
	if m != nil {
		return m.Left
	}
	return metapb.Cell{}
}

func (m *ReportSplitReq) GetRight() metapb.Cell {
	if m != nil {
		return m.Right
	}
	return metapb.Cell{}
}

type ReportSplitRsp struct {
	Header           ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *ReportSplitRsp) Reset()                    { *m = ReportSplitRsp{} }
func (m *ReportSplitRsp) String() string            { return proto.CompactTextString(m) }
func (*ReportSplitRsp) ProtoMessage()               {}
func (*ReportSplitRsp) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{29} }

func (m *ReportSplitRsp) GetHeader() ResponseHeader {
	if m != nil {
		return m.Header
	}
	return ResponseHeader{}
}

type GetLastRangesReq struct {
	From             string `protobuf:"bytes,1,opt,name=from" json:"from"`
	ID               uint64 `protobuf:"varint,2,opt,name=id" json:"id"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GetLastRangesReq) Reset()                    { *m = GetLastRangesReq{} }
func (m *GetLastRangesReq) String() string            { return proto.CompactTextString(m) }
func (*GetLastRangesReq) ProtoMessage()               {}
func (*GetLastRangesReq) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{30} }

func (m *GetLastRangesReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *GetLastRangesReq) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type GetLastRangesRsp struct {
	Ranges           []*Range `protobuf:"bytes,1,rep,name=ranges" json:"ranges,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *GetLastRangesRsp) Reset()                    { *m = GetLastRangesRsp{} }
func (m *GetLastRangesRsp) String() string            { return proto.CompactTextString(m) }
func (*GetLastRangesRsp) ProtoMessage()               {}
func (*GetLastRangesRsp) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{31} }

func (m *GetLastRangesRsp) GetRanges() []*Range {
	if m != nil {
		return m.Ranges
	}
	return nil
}

type SetLogLevel struct {
	NewLevel         int32  `protobuf:"varint,1,opt,name=newLevel" json:"newLevel"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SetLogLevel) Reset()                    { *m = SetLogLevel{} }
func (m *SetLogLevel) String() string            { return proto.CompactTextString(m) }
func (*SetLogLevel) ProtoMessage()               {}
func (*SetLogLevel) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{32} }

func (m *SetLogLevel) GetNewLevel() int32 {
	if m != nil {
		return m.NewLevel
	}
	return 0
}

type FieldDef struct {
	Name             *string    `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Type             *FieldType `protobuf:"varint,2,req,name=type,enum=pdpb.FieldType" json:"type,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *FieldDef) Reset()                    { *m = FieldDef{} }
func (m *FieldDef) String() string            { return proto.CompactTextString(m) }
func (*FieldDef) ProtoMessage()               {}
func (*FieldDef) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{33} }

func (m *FieldDef) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *FieldDef) GetType() FieldType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Uint8
}

type IndexDef struct {
	Name             string      `protobuf:"bytes,1,opt,name=name" json:"name"`
	KeyPattern       string      `protobuf:"bytes,2,opt,name=keyPattern" json:"keyPattern"`
	Fields           []*FieldDef `protobuf:"bytes,3,rep,name=fields" json:"fields,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *IndexDef) Reset()                    { *m = IndexDef{} }
func (m *IndexDef) String() string            { return proto.CompactTextString(m) }
func (*IndexDef) ProtoMessage()               {}
func (*IndexDef) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{34} }

func (m *IndexDef) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *IndexDef) GetKeyPattern() string {
	if m != nil {
		return m.KeyPattern
	}
	return ""
}

func (m *IndexDef) GetFields() []*FieldDef {
	if m != nil {
		return m.Fields
	}
	return nil
}

type IndexKeyRequest struct {
	CellID           uint64   `protobuf:"varint,1,opt,name=cellID" json:"cellID"`
	IdxName          string   `protobuf:"bytes,2,opt,name=idxName" json:"idxName"`
	UserKeys         []string `protobuf:"bytes,3,rep,name=userKeys" json:"userKeys,omitempty"`
	IsDel            bool     `protobuf:"varint,4,opt,name=isDel" json:"isDel"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *IndexKeyRequest) Reset()                    { *m = IndexKeyRequest{} }
func (m *IndexKeyRequest) String() string            { return proto.CompactTextString(m) }
func (*IndexKeyRequest) ProtoMessage()               {}
func (*IndexKeyRequest) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{35} }

func (m *IndexKeyRequest) GetCellID() uint64 {
	if m != nil {
		return m.CellID
	}
	return 0
}

func (m *IndexKeyRequest) GetIdxName() string {
	if m != nil {
		return m.IdxName
	}
	return ""
}

func (m *IndexKeyRequest) GetUserKeys() []string {
	if m != nil {
		return m.UserKeys
	}
	return nil
}

func (m *IndexKeyRequest) GetIsDel() bool {
	if m != nil {
		return m.IsDel
	}
	return false
}

type IndexSplitRequest struct {
	LeftCellID       uint64 `protobuf:"varint,1,opt,name=leftCellID" json:"leftCellID"`
	RightCellID      uint64 `protobuf:"varint,2,opt,name=rightCellID" json:"rightCellID"`
	RightStart       []byte `protobuf:"bytes,3,opt,name=rightStart" json:"rightStart,omitempty"`
	RightEnd         []byte `protobuf:"bytes,4,opt,name=rightEnd" json:"rightEnd,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *IndexSplitRequest) Reset()                    { *m = IndexSplitRequest{} }
func (m *IndexSplitRequest) String() string            { return proto.CompactTextString(m) }
func (*IndexSplitRequest) ProtoMessage()               {}
func (*IndexSplitRequest) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{36} }

func (m *IndexSplitRequest) GetLeftCellID() uint64 {
	if m != nil {
		return m.LeftCellID
	}
	return 0
}

func (m *IndexSplitRequest) GetRightCellID() uint64 {
	if m != nil {
		return m.RightCellID
	}
	return 0
}

func (m *IndexSplitRequest) GetRightStart() []byte {
	if m != nil {
		return m.RightStart
	}
	return nil
}

func (m *IndexSplitRequest) GetRightEnd() []byte {
	if m != nil {
		return m.RightEnd
	}
	return nil
}

type IndexRequest struct {
	IdxKey           *IndexKeyRequest   `protobuf:"bytes,1,opt,name=idxKey" json:"idxKey,omitempty"`
	IdxSplit         *IndexSplitRequest `protobuf:"bytes,2,opt,name=idxSplit" json:"idxSplit,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *IndexRequest) Reset()                    { *m = IndexRequest{} }
func (m *IndexRequest) String() string            { return proto.CompactTextString(m) }
func (*IndexRequest) ProtoMessage()               {}
func (*IndexRequest) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{37} }

func (m *IndexRequest) GetIdxKey() *IndexKeyRequest {
	if m != nil {
		return m.IdxKey
	}
	return nil
}

func (m *IndexRequest) GetIdxSplit() *IndexSplitRequest {
	if m != nil {
		return m.IdxSplit
	}
	return nil
}

func init() {
	proto.RegisterType((*ChangePeer)(nil), "pdpb.ChangePeer")
	proto.RegisterType((*TransferLeader)(nil), "pdpb.TransferLeader")
	proto.RegisterType((*PeerStats)(nil), "pdpb.PeerStats")
	proto.RegisterType((*Range)(nil), "pdpb.Range")
	proto.RegisterType((*StoreStats)(nil), "pdpb.StoreStats")
	proto.RegisterType((*RequestHeader)(nil), "pdpb.RequestHeader")
	proto.RegisterType((*ResponseHeader)(nil), "pdpb.ResponseHeader")
	proto.RegisterType((*Leader)(nil), "pdpb.Leader")
	proto.RegisterType((*LeaderReq)(nil), "pdpb.LeaderReq")
	proto.RegisterType((*LeaderRsp)(nil), "pdpb.LeaderRsp")
	proto.RegisterType((*PutStoreReq)(nil), "pdpb.PutStoreReq")
	proto.RegisterType((*PutStoreRsp)(nil), "pdpb.PutStoreRsp")
	proto.RegisterType((*GetStoreReq)(nil), "pdpb.GetStoreReq")
	proto.RegisterType((*GetStoreRsp)(nil), "pdpb.GetStoreRsp")
	proto.RegisterType((*GetClusterIDReq)(nil), "pdpb.GetClusterIDReq")
	proto.RegisterType((*GetClusterIDRsp)(nil), "pdpb.GetClusterIDRsp")
	proto.RegisterType((*AllocIDReq)(nil), "pdpb.AllocIDReq")
	proto.RegisterType((*AllocIDRsp)(nil), "pdpb.AllocIDRsp")
	proto.RegisterType((*IsClusterBootstrapReq)(nil), "pdpb.IsClusterBootstrapReq")
	proto.RegisterType((*IsClusterBootstrapRsp)(nil), "pdpb.IsClusterBootstrapRsp")
	proto.RegisterType((*BootstrapClusterReq)(nil), "pdpb.BootstrapClusterReq")
	proto.RegisterType((*BootstrapClusterRsp)(nil), "pdpb.BootstrapClusterRsp")
	proto.RegisterType((*CellHeartbeatReq)(nil), "pdpb.CellHeartbeatReq")
	proto.RegisterType((*CellHeartbeatRsp)(nil), "pdpb.CellHeartbeatRsp")
	proto.RegisterType((*StoreHeartbeatReq)(nil), "pdpb.StoreHeartbeatReq")
	proto.RegisterType((*StoreHeartbeatRsp)(nil), "pdpb.StoreHeartbeatRsp")
	proto.RegisterType((*AskSplitReq)(nil), "pdpb.AskSplitReq")
	proto.RegisterType((*AskSplitRsp)(nil), "pdpb.AskSplitRsp")
	proto.RegisterType((*ReportSplitReq)(nil), "pdpb.ReportSplitReq")
	proto.RegisterType((*ReportSplitRsp)(nil), "pdpb.ReportSplitRsp")
	proto.RegisterType((*GetLastRangesReq)(nil), "pdpb.GetLastRangesReq")
	proto.RegisterType((*GetLastRangesRsp)(nil), "pdpb.GetLastRangesRsp")
	proto.RegisterType((*SetLogLevel)(nil), "pdpb.SetLogLevel")
	proto.RegisterType((*FieldDef)(nil), "pdpb.FieldDef")
	proto.RegisterType((*IndexDef)(nil), "pdpb.IndexDef")
	proto.RegisterType((*IndexKeyRequest)(nil), "pdpb.IndexKeyRequest")
	proto.RegisterType((*IndexSplitRequest)(nil), "pdpb.IndexSplitRequest")
	proto.RegisterType((*IndexRequest)(nil), "pdpb.IndexRequest")
	proto.RegisterEnum("pdpb.ConfChangeType", ConfChangeType_name, ConfChangeType_value)
	proto.RegisterEnum("pdpb.FieldType", FieldType_name, FieldType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PDService service

type PDServiceClient interface {
	GetLeader(ctx context.Context, in *LeaderReq, opts ...grpc.CallOption) (*LeaderRsp, error)
	AllocID(ctx context.Context, in *AllocIDReq, opts ...grpc.CallOption) (*AllocIDRsp, error)
	GetClusterID(ctx context.Context, in *GetClusterIDReq, opts ...grpc.CallOption) (*GetClusterIDRsp, error)
	IsClusterBootstrap(ctx context.Context, in *IsClusterBootstrapReq, opts ...grpc.CallOption) (*IsClusterBootstrapRsp, error)
	BootstrapCluster(ctx context.Context, in *BootstrapClusterReq, opts ...grpc.CallOption) (*BootstrapClusterRsp, error)
	PutStore(ctx context.Context, in *PutStoreReq, opts ...grpc.CallOption) (*PutStoreRsp, error)
	GetStore(ctx context.Context, in *GetStoreReq, opts ...grpc.CallOption) (*GetStoreRsp, error)
	CellHeartbeat(ctx context.Context, in *CellHeartbeatReq, opts ...grpc.CallOption) (*CellHeartbeatRsp, error)
	StoreHeartbeat(ctx context.Context, in *StoreHeartbeatReq, opts ...grpc.CallOption) (*StoreHeartbeatRsp, error)
	AskSplit(ctx context.Context, in *AskSplitReq, opts ...grpc.CallOption) (*AskSplitRsp, error)
	ReportSplit(ctx context.Context, in *ReportSplitReq, opts ...grpc.CallOption) (*ReportSplitRsp, error)
	GetLastRanges(ctx context.Context, in *GetLastRangesReq, opts ...grpc.CallOption) (*GetLastRangesRsp, error)
}

type pDServiceClient struct {
	cc *grpc.ClientConn
}

func NewPDServiceClient(cc *grpc.ClientConn) PDServiceClient {
	return &pDServiceClient{cc}
}

func (c *pDServiceClient) GetLeader(ctx context.Context, in *LeaderReq, opts ...grpc.CallOption) (*LeaderRsp, error) {
	out := new(LeaderRsp)
	err := grpc.Invoke(ctx, "/pdpb.PDService/GetLeader", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pDServiceClient) AllocID(ctx context.Context, in *AllocIDReq, opts ...grpc.CallOption) (*AllocIDRsp, error) {
	out := new(AllocIDRsp)
	err := grpc.Invoke(ctx, "/pdpb.PDService/AllocID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pDServiceClient) GetClusterID(ctx context.Context, in *GetClusterIDReq, opts ...grpc.CallOption) (*GetClusterIDRsp, error) {
	out := new(GetClusterIDRsp)
	err := grpc.Invoke(ctx, "/pdpb.PDService/GetClusterID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pDServiceClient) IsClusterBootstrap(ctx context.Context, in *IsClusterBootstrapReq, opts ...grpc.CallOption) (*IsClusterBootstrapRsp, error) {
	out := new(IsClusterBootstrapRsp)
	err := grpc.Invoke(ctx, "/pdpb.PDService/IsClusterBootstrap", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pDServiceClient) BootstrapCluster(ctx context.Context, in *BootstrapClusterReq, opts ...grpc.CallOption) (*BootstrapClusterRsp, error) {
	out := new(BootstrapClusterRsp)
	err := grpc.Invoke(ctx, "/pdpb.PDService/BootstrapCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pDServiceClient) PutStore(ctx context.Context, in *PutStoreReq, opts ...grpc.CallOption) (*PutStoreRsp, error) {
	out := new(PutStoreRsp)
	err := grpc.Invoke(ctx, "/pdpb.PDService/PutStore", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pDServiceClient) GetStore(ctx context.Context, in *GetStoreReq, opts ...grpc.CallOption) (*GetStoreRsp, error) {
	out := new(GetStoreRsp)
	err := grpc.Invoke(ctx, "/pdpb.PDService/GetStore", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pDServiceClient) CellHeartbeat(ctx context.Context, in *CellHeartbeatReq, opts ...grpc.CallOption) (*CellHeartbeatRsp, error) {
	out := new(CellHeartbeatRsp)
	err := grpc.Invoke(ctx, "/pdpb.PDService/CellHeartbeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pDServiceClient) StoreHeartbeat(ctx context.Context, in *StoreHeartbeatReq, opts ...grpc.CallOption) (*StoreHeartbeatRsp, error) {
	out := new(StoreHeartbeatRsp)
	err := grpc.Invoke(ctx, "/pdpb.PDService/StoreHeartbeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pDServiceClient) AskSplit(ctx context.Context, in *AskSplitReq, opts ...grpc.CallOption) (*AskSplitRsp, error) {
	out := new(AskSplitRsp)
	err := grpc.Invoke(ctx, "/pdpb.PDService/AskSplit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pDServiceClient) ReportSplit(ctx context.Context, in *ReportSplitReq, opts ...grpc.CallOption) (*ReportSplitRsp, error) {
	out := new(ReportSplitRsp)
	err := grpc.Invoke(ctx, "/pdpb.PDService/ReportSplit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pDServiceClient) GetLastRanges(ctx context.Context, in *GetLastRangesReq, opts ...grpc.CallOption) (*GetLastRangesRsp, error) {
	out := new(GetLastRangesRsp)
	err := grpc.Invoke(ctx, "/pdpb.PDService/GetLastRanges", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PDService service

type PDServiceServer interface {
	GetLeader(context.Context, *LeaderReq) (*LeaderRsp, error)
	AllocID(context.Context, *AllocIDReq) (*AllocIDRsp, error)
	GetClusterID(context.Context, *GetClusterIDReq) (*GetClusterIDRsp, error)
	IsClusterBootstrap(context.Context, *IsClusterBootstrapReq) (*IsClusterBootstrapRsp, error)
	BootstrapCluster(context.Context, *BootstrapClusterReq) (*BootstrapClusterRsp, error)
	PutStore(context.Context, *PutStoreReq) (*PutStoreRsp, error)
	GetStore(context.Context, *GetStoreReq) (*GetStoreRsp, error)
	CellHeartbeat(context.Context, *CellHeartbeatReq) (*CellHeartbeatRsp, error)
	StoreHeartbeat(context.Context, *StoreHeartbeatReq) (*StoreHeartbeatRsp, error)
	AskSplit(context.Context, *AskSplitReq) (*AskSplitRsp, error)
	ReportSplit(context.Context, *ReportSplitReq) (*ReportSplitRsp, error)
	GetLastRanges(context.Context, *GetLastRangesReq) (*GetLastRangesRsp, error)
}

func RegisterPDServiceServer(s *grpc.Server, srv PDServiceServer) {
	s.RegisterService(&_PDService_serviceDesc, srv)
}

func _PDService_GetLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PDServiceServer).GetLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pdpb.PDService/GetLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PDServiceServer).GetLeader(ctx, req.(*LeaderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PDService_AllocID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PDServiceServer).AllocID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pdpb.PDService/AllocID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PDServiceServer).AllocID(ctx, req.(*AllocIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PDService_GetClusterID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PDServiceServer).GetClusterID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pdpb.PDService/GetClusterID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PDServiceServer).GetClusterID(ctx, req.(*GetClusterIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PDService_IsClusterBootstrap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsClusterBootstrapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PDServiceServer).IsClusterBootstrap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pdpb.PDService/IsClusterBootstrap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PDServiceServer).IsClusterBootstrap(ctx, req.(*IsClusterBootstrapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PDService_BootstrapCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BootstrapClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PDServiceServer).BootstrapCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pdpb.PDService/BootstrapCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PDServiceServer).BootstrapCluster(ctx, req.(*BootstrapClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PDService_PutStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutStoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PDServiceServer).PutStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pdpb.PDService/PutStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PDServiceServer).PutStore(ctx, req.(*PutStoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PDService_GetStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PDServiceServer).GetStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pdpb.PDService/GetStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PDServiceServer).GetStore(ctx, req.(*GetStoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PDService_CellHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CellHeartbeatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PDServiceServer).CellHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pdpb.PDService/CellHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PDServiceServer).CellHeartbeat(ctx, req.(*CellHeartbeatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PDService_StoreHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreHeartbeatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PDServiceServer).StoreHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pdpb.PDService/StoreHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PDServiceServer).StoreHeartbeat(ctx, req.(*StoreHeartbeatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PDService_AskSplit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskSplitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PDServiceServer).AskSplit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pdpb.PDService/AskSplit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PDServiceServer).AskSplit(ctx, req.(*AskSplitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PDService_ReportSplit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportSplitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PDServiceServer).ReportSplit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pdpb.PDService/ReportSplit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PDServiceServer).ReportSplit(ctx, req.(*ReportSplitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PDService_GetLastRanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastRangesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PDServiceServer).GetLastRanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pdpb.PDService/GetLastRanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PDServiceServer).GetLastRanges(ctx, req.(*GetLastRangesReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _PDService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pdpb.PDService",
	HandlerType: (*PDServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLeader",
			Handler:    _PDService_GetLeader_Handler,
		},
		{
			MethodName: "AllocID",
			Handler:    _PDService_AllocID_Handler,
		},
		{
			MethodName: "GetClusterID",
			Handler:    _PDService_GetClusterID_Handler,
		},
		{
			MethodName: "IsClusterBootstrap",
			Handler:    _PDService_IsClusterBootstrap_Handler,
		},
		{
			MethodName: "BootstrapCluster",
			Handler:    _PDService_BootstrapCluster_Handler,
		},
		{
			MethodName: "PutStore",
			Handler:    _PDService_PutStore_Handler,
		},
		{
			MethodName: "GetStore",
			Handler:    _PDService_GetStore_Handler,
		},
		{
			MethodName: "CellHeartbeat",
			Handler:    _PDService_CellHeartbeat_Handler,
		},
		{
			MethodName: "StoreHeartbeat",
			Handler:    _PDService_StoreHeartbeat_Handler,
		},
		{
			MethodName: "AskSplit",
			Handler:    _PDService_AskSplit_Handler,
		},
		{
			MethodName: "ReportSplit",
			Handler:    _PDService_ReportSplit_Handler,
		},
		{
			MethodName: "GetLastRanges",
			Handler:    _PDService_GetLastRanges_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pdpb.proto",
}

func (m *ChangePeer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangePeer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.Type))
	if m.Peer != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPdpb(dAtA, i, uint64(m.Peer.Size()))
		n1, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TransferLeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferLeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.Peer.Size()))
	n2, err := m.Peer.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PeerStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeerStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.Peer.Size()))
	n3, err := m.Peer.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x10
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.DownSeconds))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Range) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Range) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.Cell.Size()))
	n4, err := m.Cell.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x12
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.LeaderStore.Size()))
	n5, err := m.LeaderStore.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StoreStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.StoreID))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.Capacity))
	dAtA[i] = 0x18
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.Available))
	dAtA[i] = 0x20
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.CellCount))
	dAtA[i] = 0x28
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.SendingSnapCount))
	dAtA[i] = 0x30
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.ReceivingSnapCount))
	dAtA[i] = 0x38
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.StartTime))
	dAtA[i] = 0x40
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.ApplyingSnapCount))
	dAtA[i] = 0x48
	i++
	if m.IsBusy {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x50
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.UsedSize))
	dAtA[i] = 0x58
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.BytesWritten))
	dAtA[i] = 0x60
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.LogLevel))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RequestHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.ClusterID))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ResponseHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.ClusterID))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Leader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Leader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.ID))
	dAtA[i] = 0x12
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(len(m.Addr)))
	i += copy(dAtA[i:], m.Addr)
	dAtA[i] = 0x22
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(len(m.EctdClientAddr)))
	i += copy(dAtA[i:], m.EctdClientAddr)
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LeaderReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaderReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(len(m.From)))
	i += copy(dAtA[i:], m.From)
	dAtA[i] = 0x10
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.ID))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LeaderRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaderRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.Leader.Size()))
	n6, err := m.Leader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PutStoreReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutStoreReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(len(m.From)))
	i += copy(dAtA[i:], m.From)
	dAtA[i] = 0x10
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.ID))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.Header.Size()))
	n7, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	dAtA[i] = 0x22
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.Store.Size()))
	n8, err := m.Store.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PutStoreRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutStoreRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.Header.Size()))
	n9, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetStoreReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStoreReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(len(m.From)))
	i += copy(dAtA[i:], m.From)
	dAtA[i] = 0x10
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.ID))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.Header.Size()))
	n10, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	dAtA[i] = 0x20
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.StoreID))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetStoreRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStoreRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.Header.Size()))
	n11, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	dAtA[i] = 0x12
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.Store.Size()))
	n12, err := m.Store.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetClusterIDReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetClusterIDReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(len(m.From)))
	i += copy(dAtA[i:], m.From)
	dAtA[i] = 0x10
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.ID))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetClusterIDRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetClusterIDRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.ID))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AllocIDReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllocIDReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(len(m.From)))
	i += copy(dAtA[i:], m.From)
	dAtA[i] = 0x10
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.ID))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AllocIDRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllocIDRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.ID))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *IsClusterBootstrapReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsClusterBootstrapReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(len(m.From)))
	i += copy(dAtA[i:], m.From)
	dAtA[i] = 0x10
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.ID))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *IsClusterBootstrapRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsClusterBootstrapRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	if m.Value {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BootstrapClusterReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BootstrapClusterReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(len(m.From)))
	i += copy(dAtA[i:], m.From)
	dAtA[i] = 0x10
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.ID))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.Store.Size()))
	n13, err := m.Store.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	dAtA[i] = 0x22
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.Cell.Size()))
	n14, err := m.Cell.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BootstrapClusterRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BootstrapClusterRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	if m.AlreadyBootstrapped {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CellHeartbeatReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CellHeartbeatReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(len(m.From)))
	i += copy(dAtA[i:], m.From)
	dAtA[i] = 0x10
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.ID))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.Cell.Size()))
	n15, err := m.Cell.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	if m.Leader != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPdpb(dAtA, i, uint64(m.Leader.Size()))
		n16, err := m.Leader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if len(m.DownPeers) > 0 {
		for _, msg := range m.DownPeers {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintPdpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.PendingPeers) > 0 {
		for _, msg := range m.PendingPeers {
			dAtA[i] = 0x32
			i++
			i = encodeVarintPdpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x38
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.BytesWritten))
	dAtA[i] = 0x40
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.BytesRead))
	dAtA[i] = 0x48
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.KeysWritten))
	dAtA[i] = 0x50
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.KeysRead))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CellHeartbeatRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CellHeartbeatRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChangePeer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPdpb(dAtA, i, uint64(m.ChangePeer.Size()))
		n17, err := m.ChangePeer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.TransferLeader != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPdpb(dAtA, i, uint64(m.TransferLeader.Size()))
		n18, err := m.TransferLeader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StoreHeartbeatReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreHeartbeatReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(len(m.From)))
	i += copy(dAtA[i:], m.From)
	dAtA[i] = 0x10
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.ID))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.Header.Size()))
	n19, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n19
	if m.Stats != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPdpb(dAtA, i, uint64(m.Stats.Size()))
		n20, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StoreHeartbeatRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreHeartbeatRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.Header.Size()))
	n21, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n21
	if m.SetLogLevel != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPdpb(dAtA, i, uint64(m.SetLogLevel.Size()))
		n22, err := m.SetLogLevel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if len(m.Indices) > 0 {
		for _, msg := range m.Indices {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintPdpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AskSplitReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AskSplitReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(len(m.From)))
	i += copy(dAtA[i:], m.From)
	dAtA[i] = 0x10
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.ID))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.Header.Size()))
	n23, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n23
	dAtA[i] = 0x22
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.Cell.Size()))
	n24, err := m.Cell.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n24
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AskSplitRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AskSplitRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.Header.Size()))
	n25, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n25
	dAtA[i] = 0x10
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.NewCellID))
	if len(m.NewPeerIDs) > 0 {
		for _, num := range m.NewPeerIDs {
			dAtA[i] = 0x18
			i++
			i = encodeVarintPdpb(dAtA, i, uint64(num))
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ReportSplitReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportSplitReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(len(m.From)))
	i += copy(dAtA[i:], m.From)
	dAtA[i] = 0x10
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.ID))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.Header.Size()))
	n26, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n26
	dAtA[i] = 0x22
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.Left.Size()))
	n27, err := m.Left.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n27
	dAtA[i] = 0x2a
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.Right.Size()))
	n28, err := m.Right.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n28
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ReportSplitRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportSplitRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.Header.Size()))
	n29, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n29
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetLastRangesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLastRangesReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(len(m.From)))
	i += copy(dAtA[i:], m.From)
	dAtA[i] = 0x10
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.ID))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetLastRangesRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLastRangesRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ranges) > 0 {
		for _, msg := range m.Ranges {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPdpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SetLogLevel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetLogLevel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.NewLevel))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FieldDef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FieldDef) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Name == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPdpb(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Type == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPdpb(dAtA, i, uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *IndexDef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexDef) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x12
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(len(m.KeyPattern)))
	i += copy(dAtA[i:], m.KeyPattern)
	if len(m.Fields) > 0 {
		for _, msg := range m.Fields {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintPdpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *IndexKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.CellID))
	dAtA[i] = 0x12
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(len(m.IdxName)))
	i += copy(dAtA[i:], m.IdxName)
	if len(m.UserKeys) > 0 {
		for _, s := range m.UserKeys {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x20
	i++
	if m.IsDel {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *IndexSplitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexSplitRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.LeftCellID))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.RightCellID))
	if m.RightStart != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPdpb(dAtA, i, uint64(len(m.RightStart)))
		i += copy(dAtA[i:], m.RightStart)
	}
	if m.RightEnd != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPdpb(dAtA, i, uint64(len(m.RightEnd)))
		i += copy(dAtA[i:], m.RightEnd)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *IndexRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IdxKey != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPdpb(dAtA, i, uint64(m.IdxKey.Size()))
		n30, err := m.IdxKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if m.IdxSplit != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPdpb(dAtA, i, uint64(m.IdxSplit.Size()))
		n31, err := m.IdxSplit.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64Pdpb(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Pdpb(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintPdpb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ChangePeer) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPdpb(uint64(m.Type))
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovPdpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TransferLeader) Size() (n int) {
	var l int
	_ = l
	l = m.Peer.Size()
	n += 1 + l + sovPdpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PeerStats) Size() (n int) {
	var l int
	_ = l
	l = m.Peer.Size()
	n += 1 + l + sovPdpb(uint64(l))
	n += 1 + sovPdpb(uint64(m.DownSeconds))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Range) Size() (n int) {
	var l int
	_ = l
	l = m.Cell.Size()
	n += 1 + l + sovPdpb(uint64(l))
	l = m.LeaderStore.Size()
	n += 1 + l + sovPdpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StoreStats) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPdpb(uint64(m.StoreID))
	n += 1 + sovPdpb(uint64(m.Capacity))
	n += 1 + sovPdpb(uint64(m.Available))
	n += 1 + sovPdpb(uint64(m.CellCount))
	n += 1 + sovPdpb(uint64(m.SendingSnapCount))
	n += 1 + sovPdpb(uint64(m.ReceivingSnapCount))
	n += 1 + sovPdpb(uint64(m.StartTime))
	n += 1 + sovPdpb(uint64(m.ApplyingSnapCount))
	n += 2
	n += 1 + sovPdpb(uint64(m.UsedSize))
	n += 1 + sovPdpb(uint64(m.BytesWritten))
	n += 1 + sovPdpb(uint64(m.LogLevel))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RequestHeader) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPdpb(uint64(m.ClusterID))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResponseHeader) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPdpb(uint64(m.ClusterID))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Leader) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPdpb(uint64(m.ID))
	l = len(m.Name)
	n += 1 + l + sovPdpb(uint64(l))
	l = len(m.Addr)
	n += 1 + l + sovPdpb(uint64(l))
	l = len(m.EctdClientAddr)
	n += 1 + l + sovPdpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LeaderReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.From)
	n += 1 + l + sovPdpb(uint64(l))
	n += 1 + sovPdpb(uint64(m.ID))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LeaderRsp) Size() (n int) {
	var l int
	_ = l
	l = m.Leader.Size()
	n += 1 + l + sovPdpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PutStoreReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.From)
	n += 1 + l + sovPdpb(uint64(l))
	n += 1 + sovPdpb(uint64(m.ID))
	l = m.Header.Size()
	n += 1 + l + sovPdpb(uint64(l))
	l = m.Store.Size()
	n += 1 + l + sovPdpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PutStoreRsp) Size() (n int) {
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovPdpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetStoreReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.From)
	n += 1 + l + sovPdpb(uint64(l))
	n += 1 + sovPdpb(uint64(m.ID))
	l = m.Header.Size()
	n += 1 + l + sovPdpb(uint64(l))
	n += 1 + sovPdpb(uint64(m.StoreID))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetStoreRsp) Size() (n int) {
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovPdpb(uint64(l))
	l = m.Store.Size()
	n += 1 + l + sovPdpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetClusterIDReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.From)
	n += 1 + l + sovPdpb(uint64(l))
	n += 1 + sovPdpb(uint64(m.ID))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetClusterIDRsp) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPdpb(uint64(m.ID))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AllocIDReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.From)
	n += 1 + l + sovPdpb(uint64(l))
	n += 1 + sovPdpb(uint64(m.ID))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AllocIDRsp) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPdpb(uint64(m.ID))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IsClusterBootstrapReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.From)
	n += 1 + l + sovPdpb(uint64(l))
	n += 1 + sovPdpb(uint64(m.ID))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IsClusterBootstrapRsp) Size() (n int) {
	var l int
	_ = l
	n += 2
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BootstrapClusterReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.From)
	n += 1 + l + sovPdpb(uint64(l))
	n += 1 + sovPdpb(uint64(m.ID))
	l = m.Store.Size()
	n += 1 + l + sovPdpb(uint64(l))
	l = m.Cell.Size()
	n += 1 + l + sovPdpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BootstrapClusterRsp) Size() (n int) {
	var l int
	_ = l
	n += 2
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CellHeartbeatReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.From)
	n += 1 + l + sovPdpb(uint64(l))
	n += 1 + sovPdpb(uint64(m.ID))
	l = m.Cell.Size()
	n += 1 + l + sovPdpb(uint64(l))
	if m.Leader != nil {
		l = m.Leader.Size()
		n += 1 + l + sovPdpb(uint64(l))
	}
	if len(m.DownPeers) > 0 {
		for _, e := range m.DownPeers {
			l = e.Size()
			n += 1 + l + sovPdpb(uint64(l))
		}
	}
	if len(m.PendingPeers) > 0 {
		for _, e := range m.PendingPeers {
			l = e.Size()
			n += 1 + l + sovPdpb(uint64(l))
		}
	}
	n += 1 + sovPdpb(uint64(m.BytesWritten))
	n += 1 + sovPdpb(uint64(m.BytesRead))
	n += 1 + sovPdpb(uint64(m.KeysWritten))
	n += 1 + sovPdpb(uint64(m.KeysRead))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CellHeartbeatRsp) Size() (n int) {
	var l int
	_ = l
	if m.ChangePeer != nil {
		l = m.ChangePeer.Size()
		n += 1 + l + sovPdpb(uint64(l))
	}
	if m.TransferLeader != nil {
		l = m.TransferLeader.Size()
		n += 1 + l + sovPdpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StoreHeartbeatReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.From)
	n += 1 + l + sovPdpb(uint64(l))
	n += 1 + sovPdpb(uint64(m.ID))
	l = m.Header.Size()
	n += 1 + l + sovPdpb(uint64(l))
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovPdpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StoreHeartbeatRsp) Size() (n int) {
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovPdpb(uint64(l))
	if m.SetLogLevel != nil {
		l = m.SetLogLevel.Size()
		n += 1 + l + sovPdpb(uint64(l))
	}
	if len(m.Indices) > 0 {
		for _, e := range m.Indices {
			l = e.Size()
			n += 1 + l + sovPdpb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AskSplitReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.From)
	n += 1 + l + sovPdpb(uint64(l))
	n += 1 + sovPdpb(uint64(m.ID))
	l = m.Header.Size()
	n += 1 + l + sovPdpb(uint64(l))
	l = m.Cell.Size()
	n += 1 + l + sovPdpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AskSplitRsp) Size() (n int) {
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovPdpb(uint64(l))
	n += 1 + sovPdpb(uint64(m.NewCellID))
	if len(m.NewPeerIDs) > 0 {
		for _, e := range m.NewPeerIDs {
			n += 1 + sovPdpb(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReportSplitReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.From)
	n += 1 + l + sovPdpb(uint64(l))
	n += 1 + sovPdpb(uint64(m.ID))
	l = m.Header.Size()
	n += 1 + l + sovPdpb(uint64(l))
	l = m.Left.Size()
	n += 1 + l + sovPdpb(uint64(l))
	l = m.Right.Size()
	n += 1 + l + sovPdpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReportSplitRsp) Size() (n int) {
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovPdpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetLastRangesReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.From)
	n += 1 + l + sovPdpb(uint64(l))
	n += 1 + sovPdpb(uint64(m.ID))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetLastRangesRsp) Size() (n int) {
	var l int
	_ = l
	if len(m.Ranges) > 0 {
		for _, e := range m.Ranges {
			l = e.Size()
			n += 1 + l + sovPdpb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetLogLevel) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPdpb(uint64(m.NewLevel))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FieldDef) Size() (n int) {
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovPdpb(uint64(l))
	}
	if m.Type != nil {
		n += 1 + sovPdpb(uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IndexDef) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovPdpb(uint64(l))
	l = len(m.KeyPattern)
	n += 1 + l + sovPdpb(uint64(l))
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.Size()
			n += 1 + l + sovPdpb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IndexKeyRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPdpb(uint64(m.CellID))
	l = len(m.IdxName)
	n += 1 + l + sovPdpb(uint64(l))
	if len(m.UserKeys) > 0 {
		for _, s := range m.UserKeys {
			l = len(s)
			n += 1 + l + sovPdpb(uint64(l))
		}
	}
	n += 2
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IndexSplitRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPdpb(uint64(m.LeftCellID))
	n += 1 + sovPdpb(uint64(m.RightCellID))
	if m.RightStart != nil {
		l = len(m.RightStart)
		n += 1 + l + sovPdpb(uint64(l))
	}
	if m.RightEnd != nil {
		l = len(m.RightEnd)
		n += 1 + l + sovPdpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IndexRequest) Size() (n int) {
	var l int
	_ = l
	if m.IdxKey != nil {
		l = m.IdxKey.Size()
		n += 1 + l + sovPdpb(uint64(l))
	}
	if m.IdxSplit != nil {
		l = m.IdxSplit.Size()
		n += 1 + l + sovPdpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPdpb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPdpb(x uint64) (n int) {
	return sovPdpb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChangePeer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangePeer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangePeer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (ConfChangeType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &metapb.Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferLeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferLeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferLeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeerStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownSeconds", wireType)
			}
			m.DownSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DownSeconds |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Range) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Range: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Range: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cell", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Cell.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderStore", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LeaderStore.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreID", wireType)
			}
			m.StoreID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoreID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capacity", wireType)
			}
			m.Capacity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Capacity |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Available", wireType)
			}
			m.Available = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Available |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellCount", wireType)
			}
			m.CellCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CellCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendingSnapCount", wireType)
			}
			m.SendingSnapCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendingSnapCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivingSnapCount", wireType)
			}
			m.ReceivingSnapCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceivingSnapCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyingSnapCount", wireType)
			}
			m.ApplyingSnapCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApplyingSnapCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBusy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBusy = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedSize", wireType)
			}
			m.UsedSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedSize |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesWritten", wireType)
			}
			m.BytesWritten = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesWritten |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogLevel", wireType)
			}
			m.LogLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterID", wireType)
			}
			m.ClusterID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterID", wireType)
			}
			m.ClusterID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Leader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Leader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Leader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EctdClientAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EctdClientAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaderReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaderReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaderReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaderRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaderRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaderRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Leader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PutStoreReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutStoreReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutStoreReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Store.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PutStoreRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutStoreRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutStoreRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStoreReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStoreReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStoreReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreID", wireType)
			}
			m.StoreID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoreID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStoreRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStoreRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStoreRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Store.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetClusterIDReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetClusterIDReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetClusterIDReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetClusterIDRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetClusterIDRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetClusterIDRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllocIDReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllocIDReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllocIDReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllocIDRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllocIDRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllocIDRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsClusterBootstrapReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsClusterBootstrapReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsClusterBootstrapReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsClusterBootstrapRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsClusterBootstrapRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsClusterBootstrapRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BootstrapClusterReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BootstrapClusterReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BootstrapClusterReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Store.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cell", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Cell.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BootstrapClusterRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BootstrapClusterRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BootstrapClusterRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlreadyBootstrapped", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AlreadyBootstrapped = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CellHeartbeatReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CellHeartbeatReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CellHeartbeatReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cell", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Cell.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Leader == nil {
				m.Leader = &metapb.Peer{}
			}
			if err := m.Leader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownPeers = append(m.DownPeers, PeerStats{})
			if err := m.DownPeers[len(m.DownPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingPeers = append(m.PendingPeers, metapb.Peer{})
			if err := m.PendingPeers[len(m.PendingPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesWritten", wireType)
			}
			m.BytesWritten = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesWritten |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesRead", wireType)
			}
			m.BytesRead = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesRead |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeysWritten", wireType)
			}
			m.KeysWritten = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeysWritten |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeysRead", wireType)
			}
			m.KeysRead = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeysRead |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CellHeartbeatRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CellHeartbeatRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CellHeartbeatRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangePeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChangePeer == nil {
				m.ChangePeer = &ChangePeer{}
			}
			if err := m.ChangePeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferLeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransferLeader == nil {
				m.TransferLeader = &TransferLeader{}
			}
			if err := m.TransferLeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreHeartbeatReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreHeartbeatReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreHeartbeatReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &StoreStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreHeartbeatRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreHeartbeatRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreHeartbeatRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetLogLevel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SetLogLevel == nil {
				m.SetLogLevel = &SetLogLevel{}
			}
			if err := m.SetLogLevel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Indices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Indices = append(m.Indices, &IndexDef{})
			if err := m.Indices[len(m.Indices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AskSplitReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AskSplitReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AskSplitReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cell", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Cell.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AskSplitRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AskSplitRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AskSplitRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewCellID", wireType)
			}
			m.NewCellID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewCellID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPdpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NewPeerIDs = append(m.NewPeerIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPdpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPdpb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPdpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NewPeerIDs = append(m.NewPeerIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPeerIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportSplitReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportSplitReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportSplitReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Left", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Left.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Right", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Right.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportSplitRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportSplitRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportSplitRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLastRangesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLastRangesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLastRangesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLastRangesRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLastRangesRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLastRangesRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ranges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ranges = append(m.Ranges, &Range{})
			if err := m.Ranges[len(m.Ranges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetLogLevel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetLogLevel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetLogLevel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewLevel", wireType)
			}
			m.NewLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FieldDef) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldDef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldDef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v FieldType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (FieldType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexDef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexDef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexDef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyPattern", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyPattern = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, &FieldDef{})
			if err := m.Fields[len(m.Fields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellID", wireType)
			}
			m.CellID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CellID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdxName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdxName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserKeys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserKeys = append(m.UserKeys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDel", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDel = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexSplitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexSplitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexSplitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftCellID", wireType)
			}
			m.LeftCellID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeftCellID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightCellID", wireType)
			}
			m.RightCellID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RightCellID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightStart", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RightStart = append(m.RightStart[:0], dAtA[iNdEx:postIndex]...)
			if m.RightStart == nil {
				m.RightStart = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightEnd", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RightEnd = append(m.RightEnd[:0], dAtA[iNdEx:postIndex]...)
			if m.RightEnd == nil {
				m.RightEnd = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdxKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IdxKey == nil {
				m.IdxKey = &IndexKeyRequest{}
			}
			if err := m.IdxKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdxSplit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IdxSplit == nil {
				m.IdxSplit = &IndexSplitRequest{}
			}
			if err := m.IdxSplit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPdpb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPdpb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPdpb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPdpb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPdpb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPdpb   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("pdpb.proto", fileDescriptorPdpb) }

var fileDescriptorPdpb = []byte{
	// 1517 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0xdd, 0x6e, 0xdb, 0x46,
	0x16, 0x36, 0x65, 0x4a, 0x16, 0x8f, 0x64, 0x59, 0x1e, 0xdb, 0xb1, 0xa2, 0xec, 0x3a, 0x0a, 0xb1,
	0x06, 0xe4, 0x20, 0x1b, 0x63, 0xb5, 0x8b, 0x24, 0x8b, 0xb6, 0x01, 0x6c, 0xa9, 0x4d, 0xdc, 0x18,
	0x81, 0x61, 0xb9, 0x68, 0x6e, 0x0a, 0x94, 0x16, 0x8f, 0x1c, 0x22, 0x34, 0xc9, 0x70, 0xc6, 0x76,
	0xd4, 0xde, 0xb7, 0xbd, 0x2d, 0xd0, 0x8b, 0x3e, 0x44, 0x1f, 0xa2, 0x97, 0x01, 0x7a, 0x93, 0x27,
	0x08, 0x5a, 0xf7, 0x05, 0xfa, 0x08, 0xc5, 0xfc, 0x90, 0x1a, 0x32, 0x52, 0x02, 0x15, 0x48, 0xaf,
	0x24, 0x9e, 0x33, 0xe7, 0x6f, 0xe6, 0x9b, 0x73, 0xbe, 0x01, 0x88, 0xdc, 0xe8, 0xf8, 0x76, 0x14,
	0x87, 0x2c, 0x24, 0x26, 0xff, 0xdf, 0x5c, 0x3d, 0x09, 0x4f, 0x42, 0x21, 0xd8, 0xe6, 0xff, 0xa4,
	0xae, 0xb9, 0x72, 0x8a, 0xcc, 0x89, 0x8e, 0xb7, 0xe5, 0x8f, 0x14, 0xda, 0x4f, 0x00, 0xba, 0x4f,
	0x9d, 0xe0, 0x04, 0x0f, 0x10, 0x63, 0xd2, 0x06, 0x93, 0x8d, 0x22, 0x6c, 0x18, 0x2d, 0xa3, 0x5d,
	0xeb, 0xac, 0xde, 0x16, 0x9e, 0xbb, 0x61, 0x30, 0x94, 0x6b, 0x8e, 0x46, 0x11, 0xee, 0x9a, 0x2f,
	0x5f, 0x5f, 0x9f, 0x23, 0x2d, 0x30, 0x23, 0xc4, 0xb8, 0x51, 0x68, 0x19, 0xed, 0x4a, 0xa7, 0x7a,
	0x5b, 0x39, 0xe5, 0x5e, 0xc4, 0x0a, 0xc3, 0xee, 0x40, 0xed, 0x28, 0x76, 0x02, 0x3a, 0xc4, 0x78,
	0x1f, 0x1d, 0x17, 0xe3, 0xd4, 0xc6, 0x98, 0x62, 0x33, 0x67, 0x3f, 0x04, 0x8b, 0x7f, 0xf5, 0x99,
	0xc3, 0xe8, 0xbb, 0x97, 0x93, 0xab, 0x50, 0x71, 0xc3, 0x8b, 0xa0, 0x8f, 0x83, 0x30, 0x70, 0xa9,
	0xc8, 0xc5, 0x54, 0x9e, 0xfa, 0x50, 0x3c, 0xe4, 0x29, 0x73, 0x2f, 0x03, 0xf4, 0xfd, 0xbc, 0x97,
	0x2e, 0xfa, 0xbe, 0xf2, 0xd2, 0x86, 0x8a, 0x2f, 0x12, 0xec, 0xb3, 0x30, 0x46, 0x55, 0xd1, 0x62,
	0xb2, 0x50, 0x08, 0x95, 0xd3, 0x5f, 0x0a, 0x00, 0xe2, 0x5b, 0x26, 0xb8, 0x06, 0x0b, 0x94, 0x7f,
	0xed, 0xf5, 0x84, 0x77, 0x15, 0x9a, 0x5c, 0x81, 0xf2, 0xc0, 0x89, 0x9c, 0x81, 0xc7, 0x46, 0x7a,
	0x4a, 0x64, 0x1d, 0x2c, 0xe7, 0xdc, 0xf1, 0x7c, 0xe7, 0xd8, 0xc7, 0xc6, 0x7c, 0x56, 0xc1, 0x53,
	0xec, 0x86, 0x67, 0x01, 0x6b, 0x98, 0x2d, 0xa3, 0xbd, 0xa8, 0x14, 0x1b, 0x50, 0xa7, 0x18, 0xb8,
	0x5e, 0x70, 0xd2, 0x0f, 0x9c, 0x48, 0xea, 0x8b, 0x9a, 0xbe, 0x05, 0x24, 0xc6, 0x01, 0x7a, 0xe7,
	0x99, 0x15, 0x25, 0x6d, 0xc5, 0x3a, 0x58, 0x94, 0x39, 0x31, 0x3b, 0xf2, 0x4e, 0xb1, 0xb1, 0xa0,
	0x29, 0xae, 0xc3, 0xb2, 0x13, 0x45, 0xfe, 0x28, 0x63, 0x59, 0xd6, 0x16, 0xac, 0x42, 0xc9, 0xa3,
	0xbb, 0x67, 0x74, 0xd4, 0xb0, 0x5a, 0x46, 0xbb, 0x3c, 0xae, 0xed, 0x8c, 0xa2, 0xdb, 0xf7, 0xbe,
	0xc2, 0x06, 0x68, 0x25, 0x34, 0xa1, 0x7a, 0x3c, 0x62, 0x48, 0x3f, 0x8f, 0x3d, 0xc6, 0x30, 0x68,
	0x54, 0xb2, 0xfb, 0xe1, 0x87, 0x27, 0xfb, 0x78, 0x8e, 0x7e, 0xa3, 0xda, 0x32, 0xda, 0x45, 0xb5,
	0x9b, 0x6d, 0x58, 0x3c, 0xc4, 0xe7, 0x67, 0x48, 0xd9, 0x43, 0x89, 0x0f, 0xbe, 0x0f, 0xfe, 0x19,
	0x65, 0x18, 0x67, 0x77, 0xd4, 0xde, 0x82, 0xda, 0x21, 0xd2, 0x28, 0x0c, 0x28, 0xbe, 0x6b, 0xe9,
	0x10, 0x4a, 0x0a, 0x6d, 0x57, 0xa0, 0xe0, 0xb9, 0x4a, 0x07, 0x5c, 0x77, 0xf9, 0xfa, 0x7a, 0x61,
	0xaf, 0x47, 0x08, 0x98, 0x81, 0x73, 0x2a, 0xcf, 0xd9, 0x52, 0x29, 0x12, 0x30, 0x1d, 0xd7, 0x8d,
	0xc5, 0xa9, 0x24, 0xb2, 0x7f, 0x40, 0x0d, 0x07, 0xcc, 0xed, 0xfa, 0x1e, 0x06, 0x6c, 0x87, 0x6b,
	0xcd, 0xb1, 0xd6, 0xbe, 0x0b, 0x96, 0x8c, 0x73, 0x88, 0xcf, 0xb9, 0xf9, 0x30, 0x0e, 0x4f, 0x45,
	0x30, 0x2b, 0xad, 0x9a, 0x87, 0x2f, 0xe4, 0xc3, 0xdb, 0xdb, 0xa9, 0x21, 0x8d, 0x88, 0x0d, 0x25,
	0x09, 0xbd, 0x14, 0x9e, 0xe2, 0xc6, 0xc9, 0x05, 0x2a, 0xd2, 0x77, 0x06, 0x54, 0x0e, 0xce, 0x98,
	0xc0, 0xdd, 0x8c, 0xc1, 0xc8, 0x16, 0x94, 0x9e, 0x4a, 0xff, 0xf3, 0xc2, 0xff, 0x8a, 0xf4, 0x9f,
	0xd9, 0x76, 0xe5, 0xc2, 0x86, 0xa2, 0x00, 0xb3, 0xa8, 0x72, 0x0a, 0xfe, 0xff, 0xaf, 0x65, 0x42,
	0x23, 0x72, 0x33, 0xf5, 0x2e, 0xb3, 0x5f, 0x4d, 0xbc, 0xeb, 0x47, 0xa5, 0x4c, 0xbf, 0x86, 0xca,
	0x03, 0x7c, 0xef, 0x45, 0x68, 0x37, 0xd2, 0xd4, 0x40, 0xf1, 0x85, 0x16, 0x7c, 0xb6, 0xbc, 0xc7,
	0xdb, 0xf2, 0x96, 0xb6, 0xf0, 0x11, 0x2c, 0x3d, 0x40, 0xd6, 0x4d, 0xf0, 0x38, 0x2b, 0x22, 0xb6,
	0x72, 0xe6, 0x34, 0x9a, 0x86, 0x5d, 0xfb, 0x1e, 0xc0, 0x8e, 0xef, 0x87, 0x83, 0xd9, 0x83, 0xfc,
	0x6b, 0x6c, 0xf9, 0x16, 0xff, 0x5d, 0x58, 0xdb, 0xa3, 0x2a, 0x93, 0xdd, 0x30, 0x64, 0x94, 0xc5,
	0x4e, 0x34, 0x6b, 0xa8, 0x5b, 0x13, 0x9d, 0xd0, 0x88, 0xac, 0x40, 0xf1, 0xdc, 0xf1, 0xcf, 0xe4,
	0x78, 0x51, 0x1d, 0xc5, 0xfe, 0xd6, 0x80, 0x95, 0x74, 0x95, 0xb2, 0x9a, 0x15, 0x21, 0xe9, 0x21,
	0xcd, 0x4f, 0x3d, 0xa4, 0x74, 0x0e, 0x98, 0xd3, 0xe6, 0x80, 0x7d, 0x6f, 0x42, 0x22, 0x34, 0x22,
	0x37, 0x60, 0xc5, 0xf1, 0x63, 0x74, 0xdc, 0x51, 0xaa, 0x8d, 0xd0, 0xcd, 0xd4, 0xf0, 0x73, 0x01,
	0xea, 0xdc, 0xd1, 0x43, 0x74, 0x62, 0x76, 0x8c, 0x0e, 0x9b, 0xb5, 0x80, 0x24, 0xb9, 0xf9, 0xa9,
	0x43, 0x6a, 0xdc, 0x29, 0xcc, 0x69, 0x13, 0x97, 0xb4, 0xc1, 0xe2, 0xe3, 0x90, 0x4b, 0x68, 0xa3,
	0xd8, 0x9a, 0x6f, 0x57, 0x3a, 0x4b, 0x12, 0xda, 0xe9, 0x50, 0x4d, 0x47, 0x5e, 0x35, 0x92, 0x83,
	0x45, 0x2e, 0x2e, 0x89, 0xc5, 0x93, 0x46, 0x6c, 0xbe, 0xb1, 0x2f, 0x64, 0xe7, 0x96, 0xd0, 0x1d,
	0xa2, 0xe3, 0x8a, 0xd9, 0x61, 0x8e, 0xe7, 0xf2, 0x33, 0x1c, 0xa5, 0x36, 0x56, 0x76, 0x18, 0x70,
	0x95, 0x30, 0xd1, 0x06, 0x88, 0x1d, 0xe7, 0x77, 0x50, 0xdc, 0x53, 0x18, 0xa4, 0xdc, 0x44, 0xdd,
	0xd5, 0xba, 0xe2, 0x24, 0xa9, 0x5c, 0xd5, 0xde, 0x81, 0x1a, 0xcb, 0xb0, 0x0d, 0x75, 0x61, 0xd5,
	0xdd, 0xce, 0x32, 0x11, 0xc5, 0x50, 0xbe, 0x37, 0x60, 0x59, 0x40, 0xe4, 0x2f, 0x9f, 0xdb, 0x0c,
	0xad, 0x69, 0x93, 0x63, 0xd4, 0x61, 0x54, 0x9d, 0x9f, 0xaa, 0x63, 0xcc, 0x26, 0x54, 0x4e, 0x3f,
	0xbc, 0x99, 0xd3, 0x8c, 0x1d, 0xeb, 0x16, 0x54, 0x28, 0xb2, 0xfd, 0x64, 0xe2, 0xca, 0x6d, 0x58,
	0x56, 0xe1, 0xc6, 0x0a, 0xb5, 0x6f, 0x9b, 0xb0, 0xe0, 0x05, 0xae, 0x37, 0x40, 0xda, 0x98, 0x17,
	0x20, 0xa8, 0xc9, 0x95, 0x7b, 0x81, 0x8b, 0x2f, 0x7a, 0x38, 0x54, 0x69, 0x7d, 0x63, 0x40, 0x65,
	0x87, 0x3e, 0xeb, 0x47, 0xbe, 0xf7, 0x3e, 0x37, 0xe9, 0xdd, 0x97, 0x74, 0xa8, 0xe5, 0x31, 0xe3,
	0xc6, 0xac, 0x83, 0x15, 0xe0, 0x05, 0xf7, 0xb5, 0xd7, 0xcb, 0x10, 0x33, 0x02, 0x10, 0xe0, 0x05,
	0x07, 0xd3, 0x5e, 0x4f, 0x6e, 0x83, 0x69, 0xff, 0x64, 0x70, 0xce, 0x11, 0x85, 0x31, 0xfb, 0x1b,
	0x6a, 0xf6, 0x71, 0xc8, 0xa6, 0xd7, 0x4c, 0x6e, 0x40, 0x31, 0xf6, 0x4e, 0x9e, 0x4a, 0xee, 0x37,
	0x79, 0x5b, 0x3e, 0xcc, 0x66, 0x3b, 0xe3, 0x70, 0xbe, 0x0f, 0xf5, 0x07, 0xc8, 0xf6, 0x1d, 0xca,
	0x04, 0x67, 0xa6, 0xb3, 0x73, 0x9a, 0x9c, 0x3d, 0x8d, 0xc8, 0x35, 0x28, 0xc5, 0xe2, 0xa3, 0x61,
	0x08, 0x5c, 0x55, 0x54, 0x7c, 0x2e, 0xb3, 0x37, 0xa1, 0xa2, 0x41, 0x91, 0x37, 0x85, 0x00, 0x2f,
	0x24, 0x5e, 0x0d, 0x8d, 0x21, 0xde, 0x85, 0xf2, 0x27, 0x1e, 0xfa, 0x6e, 0x0f, 0x87, 0xa4, 0xaa,
	0x68, 0x9b, 0xd1, 0x2a, 0xb4, 0x2d, 0xf2, 0x4f, 0xf5, 0x50, 0x29, 0xb4, 0x0a, 0xed, 0x5a, 0xd2,
	0xe5, 0xc4, 0x5a, 0xfe, 0x46, 0xb1, 0x9f, 0x40, 0x39, 0x01, 0x70, 0xca, 0xf7, 0xf4, 0x42, 0x1a,
	0x00, 0xcf, 0x70, 0x74, 0xe0, 0x30, 0x86, 0x71, 0x90, 0x61, 0x82, 0x1b, 0x50, 0x1a, 0x72, 0x37,
	0xb9, 0xeb, 0x90, 0xa4, 0x61, 0x23, 0x2c, 0x09, 0xcf, 0x8f, 0x70, 0xa4, 0x0e, 0x93, 0x33, 0xe5,
	0x81, 0x04, 0x95, 0xfe, 0x0a, 0x58, 0x83, 0x05, 0xcf, 0x7d, 0xf1, 0x38, 0xcf, 0x34, 0xeb, 0x82,
	0x40, 0xc7, 0x8f, 0x70, 0x24, 0x23, 0x58, 0x7c, 0x2a, 0x7a, 0xb4, 0x87, 0x12, 0xf4, 0xc9, 0x44,
	0x09, 0x60, 0x59, 0x84, 0x49, 0xc0, 0x27, 0x02, 0x35, 0x00, 0x38, 0x52, 0xba, 0x6f, 0x06, 0xbb,
	0x0a, 0x15, 0x81, 0x90, 0xc9, 0xe0, 0x16, 0xaa, 0x3e, 0x7f, 0x06, 0x08, 0x34, 0x56, 0x79, 0x12,
	0x42, 0xf6, 0x71, 0xe0, 0x8a, 0xa8, 0x55, 0xfb, 0x4b, 0xa8, 0x8a, 0x78, 0x49, 0xa8, 0x4d, 0x28,
	0x79, 0x2e, 0x2f, 0x52, 0xa1, 0x67, 0x4d, 0xeb, 0x0a, 0x5a, 0xe9, 0x5b, 0x50, 0xf6, 0x5c, 0x99,
	0xa4, 0x6a, 0x34, 0xeb, 0xda, 0x42, 0x3d, 0xf9, 0x9b, 0xff, 0x86, 0x5a, 0xf6, 0x21, 0x49, 0x2a,
	0xb0, 0xb0, 0xe3, 0xba, 0x8f, 0x43, 0x17, 0xeb, 0x73, 0xa4, 0x06, 0x70, 0x88, 0xa7, 0xe1, 0x39,
	0x8a, 0x6f, 0xe3, 0x66, 0x0f, 0xac, 0xf4, 0x38, 0x89, 0x05, 0xc5, 0xcf, 0xbc, 0x80, 0xdd, 0xab,
	0xcf, 0x11, 0x80, 0x12, 0xff, 0xfb, 0x9f, 0x3b, 0x75, 0x23, 0xf9, 0xff, 0xdf, 0x4e, 0xbd, 0x90,
	0xfc, 0xbf, 0xf3, 0xbf, 0xfa, 0x3c, 0x29, 0x83, 0x79, 0x84, 0x2f, 0x58, 0xdd, 0xec, 0xfc, 0x51,
	0x04, 0xeb, 0xa0, 0xd7, 0xc7, 0xf8, 0xdc, 0x1b, 0x20, 0xd9, 0x06, 0x8b, 0xc3, 0x54, 0x3e, 0x0f,
	0x96, 0x74, 0xaa, 0x7d, 0x88, 0xcf, 0x9b, 0x59, 0x01, 0x8d, 0xec, 0x39, 0xb2, 0x0d, 0x0b, 0x8a,
	0x34, 0x11, 0xd5, 0xaf, 0xc7, 0xec, 0xab, 0x99, 0x93, 0x08, 0x83, 0xfb, 0x50, 0xd5, 0xa9, 0x1c,
	0x51, 0xdb, 0x96, 0x63, 0x87, 0xcd, 0x49, 0x62, 0x61, 0x7f, 0x00, 0xe4, 0x4d, 0xea, 0x44, 0xae,
	0xa9, 0x3d, 0x9d, 0xc4, 0xcc, 0x9a, 0xd3, 0x95, 0xc2, 0xe3, 0xa7, 0x50, 0xcf, 0x93, 0x1a, 0x72,
	0x55, 0x9a, 0x4c, 0x60, 0x5d, 0xcd, 0x69, 0x2a, 0xe1, 0xab, 0x03, 0xe5, 0x84, 0xfe, 0x13, 0x35,
	0x50, 0xb4, 0x87, 0x49, 0x33, 0x2f, 0x4a, 0x6c, 0x12, 0xea, 0x9d, 0xd8, 0x68, 0xef, 0x80, 0x66,
	0x5e, 0x24, 0x6c, 0x76, 0x60, 0x31, 0xc3, 0x05, 0xc8, 0x15, 0x35, 0xf4, 0x73, 0x14, 0xab, 0x39,
	0x51, 0x2e, 0x5c, 0xf4, 0xa0, 0x96, 0x9d, 0xa2, 0x64, 0x5d, 0x1b, 0xb8, 0x19, 0x27, 0x93, 0x15,
	0x49, 0xf2, 0xc9, 0xb0, 0x49, 0x92, 0xd7, 0x86, 0x60, 0x33, 0x2f, 0x12, 0x36, 0x1f, 0x40, 0x45,
	0xeb, 0xc4, 0x24, 0x6d, 0xbb, 0xfa, 0x28, 0x69, 0x4e, 0x90, 0x26, 0x95, 0x67, 0x1a, 0x69, 0x52,
	0x79, 0xbe, 0x3b, 0x37, 0x27, 0xca, 0xb9, 0x8b, 0xdd, 0xd5, 0x57, 0xbf, 0x6d, 0xcc, 0xbd, 0xbc,
	0xdc, 0x30, 0x5e, 0x5d, 0x6e, 0x18, 0xbf, 0x5e, 0x6e, 0x18, 0x3f, 0xfe, 0xbe, 0x31, 0xf7, 0x67,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x89, 0x7e, 0x2d, 0xa4, 0x24, 0x12, 0x00, 0x00,
}
